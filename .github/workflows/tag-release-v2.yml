name: Tag Release

#
# Please Read This!
#
# The purpose of this action is to 1) parse a commit message or PR subject for a keyword
# like patch/minor/major, 2) fetch the most recent git tag, 3) based on the keyword,
# increment the version and then 4) commit that new version (as a tag) back to GitHub.
#
# There are some intricies here, not the least of which is in a GitHub actions runs, by default,
# GitHub issues the action a short-lived token -- called ${{ secrets.GITHUB_TOKEN }} -- which
# is what the action uses when it iterfaces with GitHub to checkout the repo.concurrency:
#
# That token has very limited permissions (basically checkout only) and cannot be used to push
# a tag back to a repo.
#
# Consequently, this action uses a Personal Access Token which is slightly more permissions
# than the default  GITHUB_TOKEN.  This is set as an organization secret, and ultimately comes
# from Clark's account.
#
# persist-credentials: false -- this is required so that we can use the PAT for the tag push later
# in the action.
#
# Useful links:
#  - https://docs.github.com/en/actions/using-workflows/triggering-a-workflow
#  - https://github.com/orgs/community/discussions/26220
#

on:
  push:
    branches-ignore:
      - test*

jobs:
  tag-release:
    name: Tag Release
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, 'major') || contains(github.event.head_commit.message, 'minor') || contains(github.event.head_commit.message, 'patch')"
    steps:
      - name: Dump GitHub context
        run: echo '${{ toJSON(github) }}'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          persist-credentials: false # this must be false to use the PAT in the push below

      - name: Setup Git Client
        run: |
          # user.name/user.email comes from the last commit
          git config --global user.name "$(git log -n 1 --pretty=format:%an)"
          git config --global user.email  "$(git log -n 1 --pretty=format:%ae)"

          # reconfigure Git client to use the PAT
          git remote remove origin
          git remote add origin https://${{ secrets.BLUEBOARD_BOT_PAT }}@github.com/blueboard/${{ github.event.repository.name }}.git

      - name: Get the Current Version and Bump Level from Commit Message or PR Subject
        id: get-version
        env:
          MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          # fetch the most recent tag
          git fetch origin --tags
          git tag --list --sort=creatordate > tags

          # the cut is to strip off the SHA, or everything past the dash
          VERSION=$( tail -1 tags | cut -d "-" -f 1 )

          # We started with v0.8.2-21c4777, now VERSION is just 0.8.2
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

          # if the words "major", "minor" or "patch" are in the PR subject or commit message
          # then set LEVEL to that

          export MAJOR=$( echo $MESSAGE | tr '\n' ' ' | sed -n -E 's/^.*(major).*$/\1/ip' )
          if [[ ! -z ${MAJOR} ]]; then
            echo "LEVEL=major" >> $GITHUB_OUTPUT
          fi

          export MINOR=$( echo $MESSAGE | tr '\n' ' ' | sed -n -E 's/^.*(minor).*$/\1/ip' )
          if [[ ! -z ${MINOR} ]]; then
            echo "LEVEL=minor" >> $GITHUB_OUTPUT
          fi

          export PATCH=$( echo $MESSAGE | tr '\n' ' ' | sed -n -E 's/^.*(patch).*$/\1/ip' )
          if [[ ! -z ${PATCH} ]]; then
            echo "LEVEL=patch" >> $GITHUB_OUTPUT
          fi

      - name: Get the Next Version
        id: sem-ver
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.get-version.outputs.VERSION }}

      - name: Select the Next Version to Use
        id: new-version
        if: ${{ steps.sem-ver.outputs.major != '' }}
        run: |
          # github-action-next-semvers actually calculates all of the various next semver permutations, so we
          # have to decide which one to use based on the commit message in the step above
          if [ "${{ steps.get-version.outputs.LEVEL }}" == "major" ]; then
            echo "NEW_VERSION=${{ steps.sem-ver.outputs.major }}" >> $GITHUB_OUTPUT
          elif [ "${{ steps.get-version.outputs.LEVEL }}" == "minor" ]; then
            echo "NEW_VERSION=${{ steps.sem-ver.outputs.minor }}" >> $GITHUB_OUTPUT
          elif [ "${{ steps.get-version.outputs.LEVEL }}" == "patch" ]; then
            echo "NEW_VERSION=${{ steps.sem-ver.outputs.patch }}" >> $GITHUB_OUTPUT
          fi

      - name: Echo Version Level (Debugging)
        run: |
          echo "VERSION: ${{ steps.get-version.outputs.VERSION }} (current)"
          echo "LEVEL: ${{ steps.get-version.outputs.LEVEL }}"
          echo "NEW_VERSION: ${{ steps.new-version.outputs.NEW_VERSION }} (next)"

      - name: Git Tag the New Version
        if: ${{ steps.new-version.outputs.NEW_VERSION != '' }}
        run: |
          echo "Updating version tag from ${{ steps.get-version.outputs.VERSION }} to v${{ steps.new-version.outputs.NEW_VERSION }}"

          # reconstruct the full tag, e.g. v5.5.3-39a1b0b
          export SHA=$(git rev-parse --short HEAD)

          # adds "v" prefix
          export FULL_TAG="v${{ steps.new-version.outputs.NEW_VERSION }}-${SHA}"

          # BLUEBOARD_BOT_PAT is an organization secret for the BlueboardBot account on GitHub
          # The default token that is automatically made available to GitHub actions does not
          # have permission to push tags -- so we have to use a PAT here
          git tag ${FULL_TAG}
          git push https://${{ secrets.BLUEBOARD_BOT_PAT }}@github.com/blueboard/${{ github.event.repository.name }}.git --tags