name: Deploy to Docker Swarm

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Which Docker image tag?'
        required: true
        default: 'latest'
      environment:
        description: 'To what environment?'
        type: choice
        default: 'dev'
        options:
          - dev
          - staging
          - prod
      ref:
        description: 'Branch with Docker Swarm YAML template?'
        default: 'staging'

env:
  SWARM_YAML: "docker-milestones-api-swarm.yml"
  MILESTONES_DOCKER_REPO: "blueboardinc/milestones_api"

jobs:
  deploy:
    name: Deploy ${{ github.event.inputs.tag }} to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 1

      - name: Install OpenVPN
        run: |
          sudo apt-get update
          sudo apt-get --assume-yes --no-install-recommends install openvpn

      - name: Setup VPN config for dev/staging using organization secrets
        if: "${{ github.event.inputs.environment != 'prod' }}"
        run: |
          touch secret.txt && chmod 600 secret.txt
          # these values can be confirmed to be valid with:  openssl x509 -text -in <file>
          echo ${{ secrets.DEV_VPN_CA_CRT_B64 }} | base64 --decode > ca.crt
          echo ${{ secrets.DEV_VPN_CERT_CRT_B64 }} | base64 --decode > user.crt
          echo ${{ secrets.DEV_VPN_TLS_KEY_B64 }} | base64 --decode > tls.key

          # these are just strings -- secret.txt is in the form of usename and password,
          # each on its own line
          echo ${{ secrets.DEV_VPN_SECRET_USERNAME }} > secret.txt
          echo ${{ secrets.DEV_VPN_SECRET_PASSWORD }} >> secret.txt && chmod 400 secret.txt

          # validate key with ssh-keygen
          echo ${{ secrets.DEV_VPN_CERT_KEY_B64 }} | base64 --decode > user.key && chmod 400 user.key
          ssh-keygen -y -e -f user.key

      # this step is identical to the one above, just different values for the prod env
      - name: Setup VPN config for prod using organization secrets
        if: "${{ github.event.inputs.environment == 'prod' }}"
        run: |

          touch secret.txt && chmod 600 secret.txt
          echo ${{ secrets.PROD_VPN_CA_CRT_B64 }} | base64 --decode > ca.crt
          echo ${{ secrets.PROD_VPN_CERT_CRT_B64 }} | base64 --decode > user.crt
          echo ${{ secrets.PROD_VPN_TLS_KEY_B64 }} | base64 --decode > tls.key
          echo ${{ secrets.PROD_VPN_SECRET_USERNAME }} > secret.txt
          echo ${{ secrets.PROD_VPN_SECRET_PASSWORD }} >> secret.txt && chmod 400 secret.txt
          echo ${{ secrets.PROD_VPN_CERT_KEY_B64 }} | base64 --decode > user.key && chmod 400 user.key
          ssh-keygen -y -e -f user.key

      # this step (and the one below) are not really necessary, it is not more than informational
      # to validate the ssh key for correctness
      - name: Create and validate the private key for dev/staging
        if: "${{ github.event.inputs.environment != 'prod' }}"
        run: |
          mkdir ${{ github.workspace }}/.ssh
          chmod 700 ${{ github.workspace }}/.ssh
          echo ${{ secrets.DEV_SSH_KEY_B64 }} | base64 --decode > ${{ github.workspace }}/.ssh/id_ecdsa
          chmod 400 ${{ github.workspace }}/.ssh/id_ecdsa
          ssh-keygen -y -e -f ${{ github.workspace }}/.ssh/id_ecdsa

      - name: Create and validate the private key for prod
        if: "${{ github.event.inputs.environment == 'prod' }}"
        run: |
          mkdir ${{ github.workspace }}/.ssh
          chmod 700 ${{ github.workspace }}/.ssh
          echo ${{ secrets.PROD_SSH_KEY_B64 }} | base64 --decode > ${{ github.workspace }}/.ssh/id_ecdsa
          chmod 400 ${{ github.workspace }}/.ssh/id_ecdsa
          ssh-keygen -y -e -f ${{ github.workspace }}/.ssh/id_ecdsa

      - name: Start the VPN to dev/staging
        if: "${{ github.event.inputs.environment != 'prod' }}"
        run: sudo openvpn --config ".github/vpn/config.ovpn" --log "vpn.log" --daemon

      - name: Start the VPN to prod
        if: "${{ github.event.inputs.environment == 'prod' }}"
        run: sudo openvpn --config ".github/vpn/config-prod.ovpn" --log "vpn.log" --daemon

      - name: Wait for the VPN connection
        timeout-minutes: 1
        run: |
          if [[ ${{ github.event.inputs.environment }} == 'prod' ]]; then
            export PING_HOST=${{ secrets.PROD_LEADER }}
          elif [[ ${{ github.event.inputs.environment }} == 'staging' ]]; then
            export PING_HOST=${{ secrets.STAGING_LEADER }}
          else
            export PING_HOST=${{ secrets.DEV_LEADER }}
          fi
          export IP_OCT1=$(echo ${PING_HOST} | tr "." " " | awk '{ print $1 }')
          export IP_OCT2=$(echo ${PING_HOST} | tr "." " " | awk '{ print $2 }')
          export IP_OCT3=$(echo ${PING_HOST} | tr "." " " | awk '{ print $3 }')
          export IP_OCT4=$(echo ${PING_HOST} | tr "." " " | awk '{ print $4 }')
          echo "Pinging ${IP_OCT1}.${IP_OCT2}.${IP_OCT3}.${IP_OCT4}"
          echo "Pinging ${PING_HOST}"

          echo "Pinging ${IP_OCT1}.X.X.X"
          echo "Pinging X.${IP_OCT2}.X.X"
          echo "Pinging X.X.${IP_OCT3}.X"
          echo "Pinging X.X.X.${IP_OCT4}"

          until ping -c1 ${PING_HOST}; do sleep 2; done

      - name: Export all GitHub secrets as environment variables
        env:
          SECRETS: ${{ toJson(secrets) }}
        run: |
          # the purpose of this step is to export all GitHub secrets as regular
          # env vars so that we can use envsubst in a subsequent step
          # Note: jq adds double quotes around the value, so we must use sed to
          # re-wrap the values with single quotes, but still allowing for double
          # quotes in the env var itself, i.e. so that we end up with this:
          #
          # foo='foobar'
          # bar='barfoo'
          # foobar='bar"foo"foo'
          #
          echo $SECRETS | jq --raw-output '. | to_entries[] | .key + "=" + (.value | tojson)' | \
            sed "s/\=\"/\=\'/" | \
            sed "s/\"$/'/" | \
            sed "s/\"$/'/" >> $GITHUB_ENV
          unset SECRETS

      - name: Prepare the Docker Swarm YAML file
        env:
          ENV: ${{ github.event.inputs.environment }}                   # workflow variable
          IMAGE_TAG: ${{ github.event.inputs.tag }}                     # workflow variable
          REPLICAS: ${{ vars.REPLICAS || 1 }}
        run: |
          # append the tag to form a fully qualified Docker tag
          export IMAGE_TAG="${{ env.MILESTONES_DOCKER_REPO }}:${IMAGE_TAG}"

          YAML_COMMENT="\n#\n# This YAML config was auto-generated by a Github Action on $(date)\n#\n"
          mv ${SWARM_YAML} ${SWARM_YAML}.orig
          # the use of sed here is a primitive brute-force attempt to squash any double-single quotes
          envsubst < ${SWARM_YAML}.orig | sed s/\'\'/\'/g > ${SWARM_YAML}
          echo -en ${YAML_COMMENT} >> ${SWARM_YAML}

      - name: Copy the YAML file to all Docker Swarm nodes
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ github.event.inputs.environment == 'dev' && secrets.DEV_HOSTS || github.event.inputs.environment == 'staging' && secrets.STAGING_HOSTS || secrets.PROD_HOSTS }}
          port: 22
          username: blueboard
          key_path: ${{ github.workspace }}/.ssh/id_ecdsa
          source: ${{ env.SWARM_YAML }}
          target: /home/blueboard

      - name: Pull image and update Docker Swarm
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ github.event.inputs.environment == 'dev' && secrets.DEV_LEADER || github.event.inputs.environment == 'staging' && secrets.STAGING_LEADER || secrets.PROD_LEADER }}
          port: 22
          username: blueboard
          key_path: ${{ github.workspace }}/.ssh/id_ecdsa
          script: |
            cd /home/blueboard
            ./run.sh ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_TOKEN_RO }} milestones-api > milestones-api.log

      - name: Stop the VPN
        if: always()
        run: |
          sudo chmod 444 vpn.log
          cat vpn.log
          sudo killall openvpn
