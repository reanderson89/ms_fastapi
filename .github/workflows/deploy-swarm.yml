name: Deploy to Docker Swarm

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Which Docker image tag?'
        required: true
        default: 'latest'
      environment:
        description: 'To what environment?'
        type: choice
        default: 'development'
        options:
          - development
      ref:
        description: 'Branch with Docker Swarm YAML template?'
        default: 'staging'

env:
  SWARM_YAML: "docker-milestones-swarm.yml"

jobs:
  deploy:
    name: Deploy ${{ github.event.inputs.tag }} to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.ref }}
          fetch-depth: 1

      - name: Install OpenVPN
        run: |
          sudo apt-get update
          sudo apt-get --assume-yes --no-install-recommends install openvpn

      - name: Setup VPN config using organization secrets
        # these values are from the OpenVPN config and defined as Organization secrets in GitHub
        # secret.txt is in the form of usename and password, each on its own line
        run: |
          echo "${{ secrets.DEV_VPN_CA_CRT }}" > ca.crt
          echo "${{ secrets.DEV_VPN_CERT_CRT }}" > user.crt
          echo "${{ secrets.DEV_VPN_CERT_KEY }}" > user.key && chmod 400 user.key
          echo "${{ secrets.DEV_VPN_SECRET_USERNAME_PASSWORD }}" > secret.txt && chmod 400 secret.txt
          echo "${{ secrets.DEV_VPN_TLS_KEY }}" > tls.key

      - name: Connect VPN
        run: sudo openvpn --config ".github/vpn/config.ovpn" --log "vpn.log" --daemon

      - name: Wait for a VPN connection
        timeout-minutes: 1
        run: until ping -c1 ${{ secrets.DEV_LEADER }}; do sleep 2; done

      - name: Prepare the Docker Swarm YAML file
        env:
          ACCOUNT_SID: ${{ secrets.ACCOUNT_SID }}                       # global
          ACCOUNT_TOKEN: ${{ secrets.ACCOUNT_TOKEN }}                   # global
          ALGORITHM: ${{ secrets.ALGORITHM }}                           # global
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}           # environment
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}   # environment
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}               # environment
          AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}                     # environment
          FERNET_KEY: ${{ secrets.FERNET_KEY }}                         # environment
          IMAGE_TAG: ${{ github.event.inputs.tag }}                     # workflow variable
          MYSQL_HOSTNAME: ${{ secrets.MYSQL_HOSTNAME }}                 # environment
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}                 # environment
          SECRET_KEY: ${{ secrets.SECRET_KEY }}                         # environment
          SPARKPOST_KEY: ${{ secrets.SPARKPOST_KEY }}                   # global
          TEMPORARY_TOKEN: ${{ secrets.TEMPORARY_TOKEN }}               # environment
        run: |
          # append the tag to form a fully qualified Docker tag
          export IMAGE_TAG=blueboardinc/milestones-api:${IMAGE_TAG}
          YAML_COMMENT="\n#\n# This YAML config was auto-generated by a Github Action on $(date)\n#\n"
          mv ${SWARM_YAML} ${SWARM_YAML}.orig
          envsubst < ${SWARM_YAML}.orig > ${SWARM_YAML}
          echo -en ${YAML_COMMENT} >> ${SWARM_YAML}

      - name: Copy the Docker Swarm YAML files to all nodes
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DEV_HOSTS }}                                # organization
          port: 22
          username: blueboard
          key: ${{ secrets.DEV_SSH_KEY }}                               # organization
          source: "docker-*-swarm.yml" # TODO this action doesn't seem to use an env var here?  e.g. ${SWARM_YAML}
          target: /home/blueboard

      - name: Pull image and update Docker Swarm on leader node
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DEV_LEADER }}                               # organization
          port: 22
          username: blueboard
          key: ${{ secrets.DEV_SSH_KEY }}                               # organization
          script: |
            cd /home/blueboard
            ./run.sh ${{ secrets.DOCKERHUB_USERNAME }} ${{ secrets.DOCKERHUB_TOKEN_RO }} milestones > out.log # DOCKERHUB_TOKEN or DOCKERHUB_TOKEN_RW?

      - name: Stop VPN connection
        if: always()
        run: |
          sudo chmod 444 vpn.log
          cat vpn.log
          sudo killall openvpn
