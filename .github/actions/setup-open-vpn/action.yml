---

name: Install and configure Open VPN

description: Sets up VPN client for target environment.vpn

inputs:
  vpn_ca_crt_b64:
    description: 'Base64 encoded value for Open VPN config'
    required: true
  vpn_cert_crt_b64:
    description: 'Base64 encoded value for Open VPN config'
    required: true
  vpn_tls_key_b64:
    description: 'Base64 encoded value for Open VPN config'
    required: true
  username:
    description: 'Base64 encoded value for Open VPN config'
    required: true
  password:
    description: 'Base64 encoded value for Open VPN config'
    required: true
  vpn_cert_key_b64:
    description: 'Base64 encoded value for Open VPN config'
    required: true
  auth:
    description: 'Auth type for OpenVPN'
    default: 'SHA256'
  ssh_key_b64:
    description: 'Base64 encoded SSH key to validate'
    required: true
  ping_host:
    description: 'The host to ping to confirm the VPN is up'
    required: true

runs:
  using: "composite"
  steps:
    - name: Install Open VPN
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get --assume-yes --no-install-recommends install openvpn
        which openvpn

    - name: Configure Open VPN
      shell: bash
      run: |
        touch secret.txt && chmod 600 secret.txt
        # these values can be confirmed to be valid with:  openssl x509 -text -in <file>
        echo ${{ inputs.vpn_ca_crt_b64 }} | base64 --decode > ca.crt
        echo ${{ inputs.vpn_cert_crt_b64 }} | base64 --decode > user.crt
        echo ${{ inputs.vpn_tls_key_b64 }} | base64 --decode > tls.key

        # these are just strings -- secret.txt is in the form of usename and password,
        # each on its own line
        echo ${{ inputs.username }} > secret.txt
        echo ${{ inputs.password }} >> secret.txt && chmod 400 secret.txt

        # validate key with ssh-keygen
        echo ${{ inputs.vpn_cert_key_b64 }} | base64 --decode > user.key && chmod 400 user.key
        ssh-keygen -y -e -f user.key

    # this step is not really necessary and isn't related to Open VPN, but maybe good measure
    # to validate the ssh key for correctness before continuing
    - name: Create and validate the private key
      shell: bash
      run: |
        mkdir ${{ github.workspace }}/.ssh
        chmod 700 ${{ github.workspace }}/.ssh
        echo ${{ inputs.ssh_key_b64 }} | base64 --decode > ${{ github.workspace }}/.ssh/id_ecdsa
        chmod 400 ${{ github.workspace }}/.ssh/id_ecdsa
        ssh-keygen -y -e -f ${{ github.workspace }}/.ssh/id_ecdsa

    - name: Start the VPN as a daemon
      shell: bash
      run: |
        sudo openvpn --config ${{ inputs.config }} --auth ${{ inputs.auth }} --verb 3 --log "vpn.log" --daemon

    - name: Wait for the VPN connection
      shell: bash
      run: |
        # GitHub makes it hard to see the value of secrets, so this is a trick -- grab the last octet
        # which host we're pinging for easier debugging
        export IP_OCT4=$(echo ${{ inputs.ping_host }} | tr "." " " | awk '{ print $4 }')
        echo "Pinging X.X.X.${IP_OCT4}"

        until ping -c1 ${{ inputs.ping_host }}; do sleep 2; done